import("stdfaust.lib");

var1 = 40;
var2 = 1000;
var3 = 1000;
var4 = 12;

//cntrlMain = 42;
//memWriteLev = 23;

mapsum(x,s,m) = s+(x*(m));
mapsub(x,s,m) = s-(x*(m));
mapmul(x,s,m) = m*(x+s);
mapcond(x) = select2(x>0.5,1, (1-x)*2);

delMax = 2^16;
//
integrator(s) = an.amp_follower(s);
//
localmax(frame) = ba.peakholder(frame);
// max del 1 sec
delay(del,fb) = (+ : de.delay(ma.SR,ba.sec2samp(d)))~*(fb)
with{
    d = min(0, del);
    dmax = d : ba.sec2samp : ma.np2;
};


eavg(a) = *(a) : +~*(1-a);

acor(fc) = cos(omega(fc))-1+sqrt(cosq(omega(fc))-4*cos(omega(fc))+3);

lp1p(fc) = eavg(acor(fc));

hp1(fc) = _<:_-(lp1p(fc));
// 2pi
twopi = 2*ma.PI;
tau = twopi;
//------------------------------------------------------------------------ e ---
eu = 2.71828182845904523536028747135266249775724709369995957496696762772407663;
ecalc = _ <: (1+(1/_))^_;

//-------------------------------------------------------------------- OMEGA ---
omega(fc) = fc*twopi/ma.SR;
//------------------------------------------------------- BILINEAR TRANSFORM ---
w(fc) = tan(ma.PI*fc/ma.SR);
//------------------------------------------------------------ SIN^2 - COS^2 ---
cosq(x) = cos(x)*cos(x);

//================================sampleread

sampleread_wannabe(ratio, memchunk, x) = x <: (it.frwtable(N, S, 0.0, wIdx, _, rIdx))
                             with{
                                N = 5;
                                S = 44100; //TODO change with SR
                                rIdx = os.phasor(S, ratio);
                                wIdx = ba.period(S);
               };

sampleread(ratio, memchunk, sig) =
// delay frazionario                * crossfade
  de.fdelay(maxDelay,d,sig)         *    ma.fmin(d/xfade,1) +
  de.fdelay(maxDelay,d+bufsize,sig) * (1-ma.fmin(d/xfade,1))
with {
	maxDelay = 65536;
    bufsize = int(min(maxDelay, pm.l2s(var1)) * (memchunk) : si.smoo);
    xfade = 128;
	d = (1 - ratio : si.smoo) : (+ : +(bufsize) : fmod(_,bufsize)) ~ _;
};
//process = _ <: _,sampleread(ratio, memchunk);

//ratio = hslider("ratio", 1, 0.5, 2, 0.01);
//memchunk = hslider("memchunk", 1, 0.1, 1, 0.01);

/*granular sampling = read sample sequences off subsequent buffer memory chunks, and envelopes the signal chunk with a pseudo-Gaussian envelope curve; the particular implementation should allow for time-stretching (slower memory pointer increments at grain level), as well as for "grain density" controls and slight random deviations ("jitter") on grain parameters; no frequency shift necessary*/
granular_sampling(timeIndex,memWriteDel,cntrlLev1,div) =
div;
