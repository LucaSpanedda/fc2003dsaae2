// --- LIBRARY ------------------------------------------------
integrator(s) = an.amp_follower(s);
//
localmax(frame) = ba.peakholder(frame);
// max del 1 sec
delay(del,fb) = (+ : de.delay(ma.SR,ba.sec2samp(d)))~*(fb)
with{
    d = min(0, del);
    dmax = d : ba.sec2samp : ma.np2;
};


eavg(a) = *(a) : +~*(1-a);

acor(fc) = cos(omega(fc))-1+sqrt(cosq(omega(fc))-4*cos(omega(fc))+3);

lp1p(fc) = eavg(acor(fc));

hp1(fc) = _<:_-(lp1p(fc));
// 2pi
twopi = 2*ma.PI;
tau = twopi;
//------------------------------------------------------------------------ e ---
eu = 2.71828182845904523536028747135266249775724709369995957496696762772407663;
ecalc = _ <: (1+(1/_))^_;

//-------------------------------------------------------------------- OMEGA ---
omega(fc) = fc*twopi/ma.SR;
//------------------------------------------------------- BILINEAR TRANSFORM ---
w(fc) = tan(ma.PI*fc/ma.SR);
//------------------------------------------------------------ SIN^2 - COS^2 ---
cosq(x) = cos(x)*cos(x);

//================================sampleread

sampleread_wannabe(ratio, memchunk, x) = x <: (it.frwtable(N, S, 0.0, wIdx, _, rIdx)) 
                             with{
                                N = 5;
                                S = 44100; //TODO change with SR
                                rIdx = os.phasor(S, ratio);
                                wIdx = ba.period(S);
               };

sampleread(ratio, memchunk, sig) =
// delay frazionario                * crossfade
  de.fdelay(maxDelay,d,sig)         *    ma.fmin(d/xfade,1) +
  de.fdelay(maxDelay,d+bufsize,sig) * (1-ma.fmin(d/xfade,1))
with {
    maxDelay = 65536;
    bufsize = int(min(maxDelay, pm.l2s(var1)) * (memchunk) : si.smoo);
    xfade = 128;
    d = (1 - ratio : si.smoo) : (+ : +(bufsize) : fmod(_,bufsize)) ~ _;
};

granular_sampling(ab,sig) = sig : timeStretcher
with{
    s = ab/2;
// buffer(p, x) = de.fdelay(L * ma.SR, p, x);
wIdx = ba.period(L);
buffer(p, x) = it.frwtable(3, L, .0, wIdx, x, p);
hann(x) = sin(ma.frac(x) * ma.PI) ^ 2.0;
grainRate = hslider("grain rate", 50, 10, 100, 1) : si.smoo;
// timeFactor = 1 - hslider("factor", 1, .125, 8.0, .001);
timeFactor = (ma.SR / L) * hslider("factor", 1, .125, 1, .001) : si.smoo;
// timePhase = os.phasor(L * ma.SR, (1.0 / L) * timeFactor);
jitter = hslider("jitter", 0, 0, 1, .001) : si.smoo;
timePhase = os.phasor(L, timeFactor) * ((1 - jitter) + no.noise * jitter);
ph1 = os.phasor(1, grainRate);
ph2 = ma.frac(.5 + ph1);
pos1 = ba.sAndH(ph1 < ph1', timePhase) + ph1 * (ma.SR / grainRate);
pos2 = ba.sAndH(ph2 < ph2', timePhase) + ph2 * (ma.SR / grainRate);
head1 = hann(ph1) * buffer(pos1);
head2 = hann(ph2) * buffer(pos2);
L = 48000 * 3; // seconds
timeStretcher(x) = x <: head1 + head2;
rIdx = timePhase;
};

//process = _ <: _,sampleread(ratio, memchunk);  

//ratio = hslider("ratio", 1, 0.5, 2, 0.01);
//memchunk = hslider("memchunk", 1, 0.1, 1, 0.01);
